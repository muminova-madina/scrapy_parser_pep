number,name,status
1,– PEP Purpose and Guidelines,
12,– Sample reStructuredText PEP Template,
100,– Python Unicode Integration,
13,– Python Language Governance,
10,– Voting Guidelines,
9,– Sample Plaintext PEP Template,
7,– Style Guide for C Code,
11,– CPython platform support,
20,– The Zen of Python,
42,– Feature Requests,
2,– Procedure for Adding New Modules,
3,– Guidelines for Handling Bug Reports,
8,– Style Guide for Python Code,
4,– Deprecation of Standard Modules,
6,– Bug Fix Releases,
5,– Guidelines for Language Evolution,
8104,– 2023 Term Steering Council election,
8103,– 2022 Term Steering Council election,
8102,– 2021 Term Steering Council election,
8101,– 2020 Term Steering Council election,
8016,– The Steering Council Model,
8014,– The Commons Governance Model,
8015,– Organization of the Python community,
8012,– The Community Governance Model,
8100,– January 2019 Steering Council election,
8013,– The External Council Governance Model,
8010,– The Technical Leader Governance Model,
8011,– Python Governance Model Lead by Trio of Pythonistas,
8002,– Open Source Governance Survey,
8001,– Python Governance Voting Process,
3333,– Python Web Server Gateway Interface v1.0.1,
8000,– Python Language Governance Proposal Overview,
3154,– Pickle protocol version 4,
3155,– Qualified name for classes and functions,
3153,– Asynchronous IO support,
3156,– Asynchronous IO Support Rebooted: the “asyncio” Module,
3152,– Cofunctions,
3148,– futures - execute computations asynchronously,
3150,– Statement local namespaces (aka “given” clause),
3149,– ABI version tagged .so files,
3146,– Merging Unladen Swallow into CPython,
3151,– Reworking the OS and IO exception hierarchy,
3145,– Asynchronous I/O For subprocess.Popen,
3147,– PYC Repository Directories,
3144,– IP Address Manipulation Library for the Python Standard Library,
3143,– Standard daemon process library,
3142,– Add a “while” clause to generator expressions,
3141,– A Type Hierarchy for Numbers,
3139,– Cleaning out sys and the “interpreter” module,
3138,– String representation in Python 3000,
3136,– Labeled break and continue,
3135,– New Super,
3132,– Extended Iterable Unpacking,
3133,– Introducing Roles,
3134,– Exception Chaining and Embedded Tracebacks,
3131,– Supporting Non-ASCII Identifiers,
3130,– Access to Current Module/Class/Function,
3137,– Immutable Bytes and Mutable Buffer,
3140,"– str(container) should call str(item), not repr(item)",
3129,– Class Decorators,
3127,– Integer Literal Support and Syntax,
3128,– BList: A Faster List-like Type,
3126,– Remove Implicit String Concatenation,
3125,– Remove Backslash Continuation,
3123,– Making PyObject_HEAD conform to standard C,
3124,"– Overloading, Generic Functions, Interfaces, and Adaptation",
3122,– Delineation of the main module,
3121,– Extension Module Initialization and Finalization,
3120,– Using UTF-8 as the default source encoding,
3117,– Postfix type declarations,
3116,– New I/O,
3118,– Revising the buffer protocol,
3119,– Introducing Abstract Base Classes,
3115,– Metaclasses in Python 3000,
3111,– Simple input built-in in Python 3000,
3114,– Renaming iterator.next() to iterator.__next__(),
3113,– Removal of Tuple Parameter Unpacking,
3112,– Bytes literals in Python 3000,
3109,– Raising Exceptions in Python 3000,
3110,– Catching Exceptions in Python 3000,
3105,– Make print a function,
3107,– Function Annotations,
3108,– Standard Library Reorganization,
3106,"– Revamping dict.keys(), .values() and .items()",
3102,– Keyword-Only Arguments,
3103,– A Switch/Case Statement,
3101,– Advanced String Formatting,
3104,– Access to Names in Outer Scopes,
3099,– Things that will Not Change in Python 3000,
3100,– Miscellaneous Python 3.0 Plans,
3003,– Python Language Moratorium,
3001,– Procedure for reviewing and improving standard library modules,
3000,– Python 3000,
3002,– Procedure for Backwards-Incompatible Changes,
754,– IEEE 754 Floating Point Special Values,
801,– Reserved,
721,– Using tarfile.data_filter for source distribution extraction,
713,– Callable Modules,
719,– Python 3.13 Release Schedule,
714,– Rename dist-info-metadata in the Simple API,
715,– Disabling bdist_egg distribution uploads on PyPI,
710,– Recording the provenance of installed packages,
712,– Adding a “converter” parameter to dataclasses.field,
708,– Extending the Repository API to Mitigate Dependency Confusion Attacks,
709,– Inlined comprehensions,
711,– PyBI: a standard format for distributing Python Binaries,
707,– A simplified signature for __exit__ and __aexit__,
706,– Filter for tarfile.extractall,
705,– TypedMapping: Type Hints for Mappings with a Fixed Set of Keys,
704,– Require virtual environments by default for package installers,
702,– Marking deprecations using the type system,
703,– Making the Global Interpreter Lock Optional in CPython,
701,– Syntactic formalization of f-strings,
700,– Additional Fields for the Simple API for Package Indexes,
697,– Limited C API for Extending Opaque Types,
699,– Remove private dict version field added in PEP 509,
698,– Override Decorator for Static Typing,
693,– Python 3.12 Release Schedule,
695,– Type Parameter Syntax,
696,– Type defaults for TypeVarLikes,
692,– Using TypedDict for more precise **kwargs typing,
694,– Upload 2.0 API for Python Package Repositories,
691,– JSON-based Simple API for Python Package Indexes,
690,– Lazy Imports,
689,– Unstable C API tier,
687,– Isolating modules in the standard library,
688,– Making the buffer protocol accessible in Python,
685,– Comparison of extra names for optional distribution dependencies,
686,– Make UTF-8 mode default,
684,– A Per-Interpreter GIL,
683,"– Immortal Objects, Using a Fixed Refcount",
682,– Format Specifier for Signed Zero,
679,– Allow parentheses in assert statements,
681,– Data Class Transforms,
680,– tomllib: Support for Parsing TOML in the Standard Library,
678,– Enriching Exceptions with Notes,
675,– Arbitrary Literal String Type,
673,– Self Type,
677,– Callable Type Syntax,
676,– PEP Infrastructure Process,
674,– Disallow using macros as l-values,
672,– Unicode-related Security Considerations for Python,
671,– Syntax for late-bound function argument defaults,
670,– Convert macros to functions in the Python C API,
669,– Low Impact Monitoring for CPython,
668,– Marking Python base environments as “externally managed”,
664,– Python 3.11 Release Schedule,
666,– Reject Foolish Indentation,
663,"– Standardizing Enum str(), repr(), and format() behaviors",
667,– Consistent views of namespaces,
665,– A file format to list Python dependencies for reproducibility of an application,
662,– Editable installs via virtual wheels,
658,– Serve Distribution Metadata in the Simple Repository API,
657,– Include Fine Grained Error Locations in Tracebacks,
659,– Specializing Adaptive Interpreter,
660,– Editable installs for pyproject.toml based builds (wheel based),
661,– Sentinel Values,
655,– Marking individual TypedDict items as required or potentially-missing,
654,– Exception Groups and except*,
656,– Platform Tag for Linux Distributions Using Musl,
652,– Maintaining the Stable ABI,
653,– Precise Semantics for Pattern Matching,
650,– Specifying Installer Requirements for Python Projects,
648,– Extensible customizations of the interpreter at startup,
649,– Deferred Evaluation Of Annotations Using Descriptors,
651,– Robust Stack Overflow Handling,
645,– Allow writing optional types as ,
644,– Require OpenSSL 1.1.1 or newer,
647,– User-Defined Type Guards,
646,– Variadic Generics,
643,– Metadata for Package Source Distributions,
641,– Using an underscore in the version portion of Python 3.10 compatibility tags,
642,– Explicit Pattern Syntax for Structural Pattern Matching,
640,– Unused variable syntax,
639,– Improving License Clarity with Better Package Metadata,
638,– Syntactic Macros,
636,– Structural Pattern Matching: Tutorial,
637,– Support for indexing with keyword arguments,
635,– Structural Pattern Matching: Motivation and Rationale,
632,– Deprecate distutils module,
634,– Structural Pattern Matching: Specification,
633,– Dependency specification in pyproject.toml using an exploded TOML table,
631,– Dependency specification in pyproject.toml based on PEP 508,
629,– Versioning PyPI’s Simple API,
630,– Isolating Extension Modules,
628,– Add ,
624,– Remove Py_UNICODE encoder APIs,
625,– Filename of a Source Distribution,
626,– Precise line numbers for debugging and other tools.,
627,– Recording installed projects,
620,– Hide implementation details from the C API,
621,– Storing project metadata in pyproject.toml,
623,– Remove wstr from Unicode,
622,– Structural Pattern Matching,
618,– Add Optional Length-Checking To zip,
616,– String methods to remove prefixes and suffixes,
617,– New PEG parser for CPython,
615,– Support for the IANA Time Zone Database in the Standard Library,
614,– Relaxing Grammar Restrictions On Decorators,
619,– Python 3.10 Release Schedule,
613,– Explicit Type Aliases,
611,– The one million limit,
609,– Python Packaging Authority (PyPA) Governance,
610,– Recording the Direct URL Origin of installed distributions,
612,– Parameter Specification Variables,
606,– Python Compatibility Version,
605,– A rolling feature release stream for CPython,
607,– Reducing CPython’s Feature Delivery Latency,
608,– Coordinated Python release,
603,– Adding a frozenmap type to collections,
604,– Allow writing union types as ,
602,– Annual Release Cycle for Python,
601,– Forbid return/break/continue breaking out of finally,
600,– Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,
598,– Introducing incremental feature releases,
599,– The manylinux2014 Platform Tag,
596,– Python 3.9 Release Schedule,
597,– Add optional EncodingWarning,
595,– Improving bugs.python.org,
594,– Removing dead batteries from the standard library,
593,– Flexible function and variable annotations,
591,– Adding a final qualifier to typing,
592,– Adding “Yank” Support to the Simple API,
589,– TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,
585,– Type Hinting Generics In Standard Collections,
590,– Vectorcall: a fast calling protocol for CPython,
586,– Literal Types,
588,– GitHub Issues Migration Plan,
583,– A Concurrency Memory Model for Python,
584,– Add Union Operators To dict,
587,– Python Initialization Configuration,
581,– Using GitHub Issues for CPython,
582,– Python local packages directory,
579,– Refactoring C functions and methods,
580,– The C call protocol,
576,– Rationalize Built-in function classes,
574,– Pickle protocol 5 with out-of-band data,
577,– Augmented Assignment Expressions,
578,– Python Runtime Audit Hooks,
575,– Unifying function/method classes,
571,– The manylinux2010 Platform Tag,
573,– Module State Access from C Extension Methods,
572,– Assignment Expressions,
570,– Python Positional-Only Parameters,
569,– Python 3.8 Release Schedule,
567,– Context Variables,
568,– Generator-sensitivity for Context Variables,
565,– Show DeprecationWarning in __main__,
563,– Postponed Evaluation of Annotations,
562,– Module __getattr__ and __dir__,
566,– Metadata for Python Software Packages 2.1,
564,– Add new time functions with nanosecond resolution,
561,– Distributing and Packaging Type Information,
560,– Core support for typing module and generic types,
559,– Built-in noop(),
558,– Defined semantics for locals(),
557,– Data Classes,
553,– Built-in breakpoint(),
554,– Multiple Interpreters in the Stdlib,
555,– Context-local variables (contextvars),
556,– Threaded garbage collection,
551,– Security transparency in the Python runtime,
550,– Execution Context,
552,– Deterministic pycs,
549,– Instance Descriptors,
548,– More Flexible Loop Control,
547,– Running extension modules using the -m option,
545,– Python Documentation Translations,
546,– Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,
541,– Package Index Name Retention,
542,– Dot Notation Assignment In Function Header,
540,– Add a new UTF-8 Mode,
543,– A Unified TLS API for Python,
544,– Protocols: Structural subtyping (static duck typing),
537,– Python 3.7 Release Schedule,
538,– Coercing the legacy C locale to a UTF-8 based locale,
539,– A New C-API for Thread-Local Storage in CPython,
536,– Final Grammar for Literal String Interpolation,
533,– Deterministic cleanup for iterators,
534,– Improved Errors for Missing Standard Library Modules,
535,– Rich comparison chaining,
529,– Change Windows filesystem encoding to UTF-8,
531,– Existence checking operators,
528,– Change Windows console encoding to UTF-8,
532,– A circuit breaking protocol and binary operators,
530,– Asynchronous Comprehensions,
527,– Removing Un(der)used file types/extensions on PyPI,
526,– Syntax for Variable Annotations,
525,– Asynchronous Generators,
523,– Adding a frame evaluation API to CPython,
524,– Make os.urandom() blocking on Linux,
521,– Managing global context via ‘with’ blocks in generators and coroutines,
522,– Allow BlockingIOError in security sensitive APIs,
520,– Preserving Class Attribute Definition Order,
518,– Specifying Minimum Build System Requirements for Python Projects,
519,– Adding a file system path protocol,
517,– A build-system independent format for source trees,
516,– Build system abstraction for pip/conda etc,
515,– Underscores in Numeric Literals,
513,– A Platform Tag for Portable Linux Built Distributions,
514,– Python registration in the Windows registry,
512,– Migrating from hg.python.org to GitHub,
511,– API for code transformers,
508,– Dependency specification for Python Software Packages,
510,– Specialize functions with guards,
507,– Migrate CPython to Git and GitLab,
505,– None-aware operators,
509,– Add a private version to dict,
504,– Using the System RNG by default,
506,– Adding A Secrets Module To The Standard Library,
501,– General purpose string interpolation,
503,– Simple Repository API,
502,– String Interpolation - Extended Discussion,
500,– A protocol for delegating datetime methods to their tzinfo implementations,
497,– A standard mechanism for backward compatibility,
494,– Python 3.6 Release Schedule,
499,– ,
498,– Literal String Interpolation,
496,– Environment Markers,
495,– Local Time Disambiguation,
491,– The Wheel Binary Package Format 1.9,
493,– HTTPS verification migration tools for Python 2.7,
490,– Chain exceptions at C level,
489,– Multi-phase extension module initialization,
492,– Coroutines with async and await syntax,
488,– Elimination of PYO files,
485,– A Function for testing approximate equality,
487,– Simpler customisation of class creation,
486,– Make the Python Launcher aware of virtual environments,
484,– Type Hints,
483,– The Theory of Type Hints,
480,– Surviving a Compromise of PyPI: End-to-end signing of packages,
481,"– Migrate CPython to Git, Github, and Phabricator",
482,– Literature Overview for Type Hints,
478,– Python 3.5 Release Schedule,
479,– Change StopIteration handling inside generators,
476,– Enabling certificate verification by default for stdlib http clients,
477,– Backport ensurepip (PEP 453) to Python 2.7,
475,– Retry system calls failing with EINTR,
473,– Adding structured data to built-in exceptions,
474,– Creating forge.python.org,
472,– Support for indexing with keyword arguments,
471,– os.scandir() function – a better and faster directory iterator,
470,– Removing External Hosting Support on PyPI,
466,– Network Security Enhancements for Python 2.7.x,
469,– Migration of dict iteration code to Python 3,
467,– Minor API improvements for binary sequences,
468,– Preserving the order of **kwargs in a function.,
460,– Add binary interpolation and formatting,
462,– Core development workflow automation for CPython,
465,– A dedicated infix operator for matrix multiplication,
464,– Removal of the PyPI Mirror Authenticity API,
461,– Adding % formatting to bytes and bytearray,
463,– Exception-catching expressions,
457,– Notation For Positional-Only Parameters,
459,– Standard Metadata Extensions for Python Software Packages,
458,– Secure PyPI downloads with signed repository metadata,
455,– Adding a key-transforming dictionary to collections,
454,– Add a new tracemalloc module to trace Python memory allocations,
456,– Secure and interchangeable hash algorithm,
450,– Adding A Statistics Module To The Standard Library,
453,– Explicit bootstrapping of pip in Python installations,
451,– A ModuleSpec Type for the Import System,
452,– API for Cryptographic Hash Functions v2.0,
449,– Removal of the PyPI Mirror Auto Discovery and Naming Scheme,
447,– Add __getdescriptor__ method to metaclass,
448,– Additional Unpacking Generalizations,
445,– Add new APIs to customize Python memory allocators,
446,– Make newly created file descriptors non-inheritable,
444,– Python Web3 Interface,
442,– Safe object finalization,
443,– Single-dispatch generic functions,
441,– Improving Python ZIP Application Support,
439,– Inclusion of implicit pip bootstrap in Python installation,
438,– Transitioning to release-file hosting on PyPI,
440,– Version Identification and Dependency Specification,
437,"– A DSL for specifying signatures, annotations and argument converters",
436,– The Argument Clinic DSL,
433,– Easier suppression of file descriptor inheritance,
434,– IDLE Enhancement Exception for All Branches,
435,– Adding an Enum type to the Python standard library,
432,– Restructuring the CPython startup sequence,
431,– Time zone support improvements,
427,– The Wheel Binary Package Format 1.0,
428,– The pathlib module – object-oriented filesystem paths,
429,– Python 3.4 Release Schedule,
430,– Migrating to Python 3 as the default online documentation,
425,– Compatibility Tags for Built Distributions,
426,– Metadata for Python Software Packages 2.0,
424,– A method for exposing a length hint,
423,– Naming conventions and recipes related to packaging,
421,– Adding sys.implementation,
422,– Simpler customisation of class creation,
416,– Add a frozendict builtin type,
415,– Implement context suppression with exception attributes,
419,– Protecting cleanup statements from interruptions,
418,"– Add monotonic time, performance counter, and process time functions",
420,– Implicit Namespace Packages,
417,– Including mock in the Standard Library,
414,– Explicit Unicode Literal for Python 3.3,
413,– Faster evolution of the Python Standard Library,
411,– Provisional packages in the Python standard library,
412,– Key-Sharing Dictionary,
410,– Use decimal.Decimal type for timestamps,
406,– Improved Encapsulation of Import State,
407,– New release cycle and introducing long-term support versions,
409,– Suppressing exception context,
408,– Standard library __preview__ package,
402,– Simplified Package Layout and Partitioning,
405,– Python Virtual Environments,
401,– BDFL Retirement,
399,– Pure Python/C Accelerator Module Compatibility Requirements,
400,– Deprecate codecs.StreamReader and codecs.StreamWriter,
403,– General purpose decorator clause (aka “@in” clause),
404,– Python 2.8 Un-release Schedule,
396,– Module Version Numbers,
397,– Python launcher for Windows,
398,– Python 3.3 Release Schedule,
395,– Qualified Names for Modules,
394,– The “python” Command on Unix-Like Systems,
392,– Python 3.2 Release Schedule,
393,– Flexible String Representation,
390,– Static metadata for Distutils,
391,– Dictionary-Based Configuration For Logging,
383,– Non-decodable Bytes in System Character Interfaces,
384,– Defining a Stable ABI,
385,– Migrating from Subversion to Mercurial,
386,– Changing the version comparison module in Distutils,
387,– Backwards Compatibility Policy,
389,– argparse - New Command Line Parsing Module,
382,– Namespace Packages,
380,– Syntax for Delegating to a Subgenerator,
379,– Adding an Assignment Expression,
378,– Format Specifier for Thousands Separator,
381,– Mirroring infrastructure for PyPI,
377,– Allow __enter__() methods to skip the statement body,
375,– Python 3.1 Release Schedule,
376,– Database of Installed Python Distributions,
373,– Python 2.7 Release Schedule,
374,– Choosing a distributed VCS for the Python project,
370,– Per user site-packages directory,
366,– Main module explicit relative imports,
368,– Standard image protocol and class,
371,– Addition of the multiprocessing package to the standard library,
369,– Post import hooks,
372,– Adding an ordered dictionary to collections,
364,– Transitioning to the Py3K Standard Library,
367,– New Super,
362,– Function Signature Object,
365,– Adding the pkg_resources module,
363,– Syntax For Dynamic Attribute Access,
361,– Python 2.6 and 3.0 Release Schedule,
359,– The “make” Statement,
356,– Python 2.5 Release Schedule,
357,– Allowing Any Object to be Used for Slicing,
358,– The “bytes” Object,
360,– Externally Maintained Packages,
354,– Enumerations in Python,
350,– Codetags,
355,– Path - Object oriented filesystem paths,
351,– The freeze protocol,
353,– Using ssize_t as the index type,
349,– Allow str() to return unicode strings,
352,– Required Superclass for Exceptions,
347,– Migrating the Python CVS to Subversion,
348,– Exception Reorganization for Python 3.0,
346,– User Defined (”,
345,– Metadata for Python Software Packages 1.2,
344,– Exception Chaining and Embedded Tracebacks,
342,– Coroutines via Enhanced Generators,
341,– Unifying try-except and try-finally,
343,– The “with” Statement,
338,– Executing modules as scripts,
339,– Design of the CPython Compiler,
340,– Anonymous Block Statements,
337,– Logging Usage in the Standard Library,
334,– Simple Coroutines via SuspendIteration,
335,– Overloadable Boolean Operators,
333,– Python Web Server Gateway Interface v1.0,
331,– Locale-Independent Float/String Conversions,
330,– Python Bytecode Verification,
336,– Make None Callable,
332,– Byte vectors and String/Unicode Unification,
328,– Imports: Multi-Line and Absolute/Relative,
329,– Treating Builtins as Constants in the Standard Library,
327,– Decimal Data Type,
325,– Resource-Release Support for Generators,
324,– subprocess - New process module,
326,– A Case for Top and Bottom Values,
323,– Copyable Iterators,
322,– Reverse Iteration,
321,– Date/Time Parsing and Formatting,
320,– Python 2.4 Release Schedule,
319,– Python Synchronize/Asynchronize Block,
317,– Eliminate Implicit Exception Instantiation,
318,– Decorators for Functions and Methods,
316,– Programming by Contract for Python,
315,– Enhanced While Loop,
314,– Metadata for Python Software Packages 1.1,
313,– Adding Roman Numeral Literals to Python,
311,– Simplified Global Interpreter Lock Acquisition for Extensions,
312,– Simple Implicit Lambda,
310,– Reliable Acquisition/Release Pairs,
306,– How to Change Python’s Grammar,
309,– Partial Function Application,
307,– Extensions to the pickle protocol,
308,– Conditional Expressions,
305,– CSV File API,
304,– Controlling Generation of Bytecode Files,
303,– Extend divmod() for Multiple Divisors,
301,– Package Index and Metadata for Distutils,Either “success” or “fail”.
302,– New Import Hooks,
299,– Special __main__() function in modules,
297,– Support for System Upgrades,
298,– The Locked Buffer Interface,
294,– Type Names in the types Module,
295,– Interpretation of multiline string constants,
296,– Adding a bytes Object Type,
292,– Simpler String Substitutions,
293,– Codec Error Handling Callbacks,
289,– Generator Expressions,
290,– Code Migration and Modernization,
291,– Backward Compatibility for the Python 2 Standard Library,
287,– reStructuredText Docstring Format,
288,– Generators Attributes and Exceptions,
286,– Enhanced Argument Tuples,
284,– Integer for-loops,
281,– Loop Counter Iteration with range and xrange,
283,– Python 2.3 Release Schedule,
282,– A Logging System,
285,– Adding a bool type,
277,– Unicode file name support for Windows NT,
279,– The enumerate() built-in function,
278,– Universal Newline Support,
280,– Optimizing access to globals,
276,– Simple Iterator for ints,
272,– API for Block Encryption Algorithms v1.0,
275,– Switching on Multiple Values,
273,– Import Modules from Zip Archives,
274,– Dict Comprehensions,
269,– Pgen Module for Python,
270,– uniq method for list objects,
271,– Prefixing sys.path by command line option,
268,– Extended HTTP functionality and WebDAV,
266,– Optimizing Global Variable/Attribute Access,
265,– Sorting Dictionaries by Value,
267,– Optimized Access to Module Namespaces,
262,– A Database of Installed Python Packages,
263,– Defining Python Source Code Encodings,
259,– Omit printing newline after newline,
261,– Support for “wide” Unicode characters,
260,– Simplify xrange(),
264,– Future statements in simulated shells,
257,– Docstring Conventions,
256,– Docstring Processing System Framework,
258,– Docutils Design Specification,
254,– Making Classes Look More Like Types,
255,– Simple Generators,
253,– Subtyping Built-in Types,
251,– Python 2.2 Release Schedule,
252,– Making Types Look More Like Classes,
250,– Using site-packages on Windows,
249,– Python Database API Specification v2.0,
245,– Python Interface Syntax,
248,– Python Database API Specification v1.0,
242,– Numeric Kinds,
246,– Object Adaptation,
243,– Module Repository Upload Mechanism,
247,– API for Cryptographic Hash Functions,
244,– The ,
241,– Metadata for Python Software Packages,
240,– Adding a Rational Literal to Python,
239,– Adding a Rational Type to Python,
238,– Changing the Division Operator,
235,– Import on Case-Insensitive Platforms,
237,– Unifying Long Integers and Integers,
229,– Using Distutils to Build Python,
227,– Statically Nested Scopes,
232,– Function Attributes,
230,– Warning Framework,
228,– Reworking Python’s Numeric Model,
236,– Back to the __future__,
231,– __findattr__(),
224,– Attribute Docstrings,
225,– Elementwise/Objectwise Operators,
234,– Iterators,
226,– Python 2.1 Release Schedule,
223,– Change the Meaning of ,
233,– Python Online Help,
222,– Web Library Enhancements,
217,– Display Hook for Interactive Use,
218,– Adding a Built-In Set Object Type,
221,– Import As,
220,"– Coroutines, Generators, Continuations",
219,– Stackless Python,
216,– Docstring Format,
214,– Extended Print Statement,
215,– String Interpolation,
212,– Loop Counter Iteration,
211,– Adding A New Outer Product Operator,
209,– Multi-dimensional Arrays,
210,– Decoupling the Interpreter Loop,
208,– Reworking the Coercion Model,
213,– Attribute Access Handlers,
207,– Rich Comparisons,
206,– Python Advanced Library,
203,– Augmented Assignments,
202,– List Comprehensions,
205,– Weak References,
102,– Doing Python Micro Releases,
160,– Python 1.6 Release Schedule,
201,– Lockstep Iteration,
103,– Collecting information about git,
204,– Range Literals,
200,– Python 2.0 Release Schedule,
101,– Doing Python Releases 101,
